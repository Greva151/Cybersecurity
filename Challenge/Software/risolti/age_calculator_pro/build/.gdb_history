c
exit 
c
exit 
c
exit
c
exit 
c
exit 
c
exit 
c
exit 
exit 
c
exit 
c
exit 
c
exit
c
exit 
c
exit 
c
exit 
stack
stack 100
exiit 
exit 
c
exit 
c
exit 
c
exit 
c
exit 
c
exit 
c
exit 
c
exit 
c
exit 
c
exit 
c
exit 
ls
c
exit 
c
exit 
c
exit 
c
exit 
c
exit 
c
exit 
c
exit 
c
exit 
canary
exit 
exit 
info proc mappings

p *((void **)__stack_chk_guard)

canary 
exit 
exit 
c
exit 
c
exit 
c
exit 
exit 
stack 100
exit 
exit 
info frame
canary
stack 20
exit 
c
$rbp
info registers rsp
canary
exi 
info registers rsp
caanry 
canary
exit 
c
stack 
stack 20
exit 
c
stack 130
c
exit
c
exit 
c
exit 
exit 
c
exit 
stack 30
exit
c
stack 
exit 
b printf
c
stack 
stack 30
exit 
exit 
c
exit 
exit 
c
exit 
c
exit 
c
exit
b printf
stack 30
c
stack 30
exit 
exit
c
exit 
c
exit 
c
canary
exit
c
canary
exit 
c
exit 
canary
c
exit 
c
c
exit 
c
exit 
c
c
c
exit
c
c
canary
c
c
exit 
c
canary
exit 
c
exit
c
exit 
c
exit 
c
exit 
c
c
c
eixt 
exit 
c
exit 
c
exit 
c
exit 
c
exit 
c
stack 
stack 10
exit 
exit 
c
c
c
exit 
caanry
canary
b printf
c
canary
stack 100
exit
b printf
canary
stack 40
c
exit
b printf
c
exit
b printf
c
c
c
b printf
c
exit 
exit 
b printf
canary
c
stack 100
exit 
exit 
b printf
c
stack 
stack 10
stack 100
canary
exit 
exit 
b win
exit 
c
c
c
exit 
c
exit 
info function win 
exit 
c
exit 
c
exit 
